# docker-compose.yml

version: '3.8'

services:
  # ------ Database Cluster ------
  postgres:
    image: postgres:16-alpine  # More secure than standard image
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}  # HARDCODED: Set in .env
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
    restart: always

  # ------ Application Services ------
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
            gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: "config.settings.production"
    ports:
      - "${APP_PORT:-8000}:8000"
    networks:
      - backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      - django_logs:/var/log/django

  # ------ Monitoring ------
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - backend
    restart: unless-stopped

  # ------ Reverse Proxy ------
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  prometheus_data:
  django_logs:

networks:
  backend:
    driver: bridge

# ------ Security Enforcement ------
# 1. Set these in .env file:
#    - REDIS_PASSWORD
#    - POSTGRES_PASSWORD
#    - SECRET_KEY
# 2. Generate SSL certificates for production
# 3. Enable firewall (only 443 and 80 open)