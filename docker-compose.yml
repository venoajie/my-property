# docker-compose.yml

services:
  # Database Service
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Should come from secrets in production
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - backend
      
  # Database Migrations Service
  migrations:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    restart: on-failure

  # Django Application Service
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db --timeout 30 &&
            python manage.py migrate &&
            python manage.py collectstatic --no-input &&
            gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 120 --workers 2"
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: "config.settings.${DJANGO_ENV:-production}"
      STREAM_CHAT_API_KEY: ${STREAM_CHAT_API_KEY}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}  # Should use IAM roles in AWS
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      GUNICORN_TIMEOUT: 120
      GUNICORN_WORKERS: 2
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - staticfiles:/app/staticfiles

  # Monitoring Service
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backend
    restart: unless-stopped

  # Web Server Service
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  staticfiles:
    driver: local

networks:
  backend:
    driver: bridge
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: "172.28.0.0/16"