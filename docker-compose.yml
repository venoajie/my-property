# my-property/docker-compose.yml
# Service Architecture: [Database] ← [App] → [Cache] → [Monitoring] | [Proxy] → Internet

services:
  # --- CORE DATA SERVICES ---
  postgres-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}            # .env: Database name
      POSTGRES_USER: ${POSTGRES_USER}        # .env: Database user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # HARDCODED: Use Docker secrets in production
      LANG: en_US.utf8  
      LC_ALL: en_US.utf8 
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/ssl:/ssl:ro  # For production SSL certs
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 2s
      retries: 15
    command: >-
      -c ssl=on  # Enable SSL
      -c ssl_cert_file=/ssl/server.crt
      -c ssl_key_file=/ssl/server.key
      -c ssl_ca_file=/ssl/ca.crt

  redis-cache:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}  # HARDCODED: Rotate quarterly
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]

  # --- APPLICATION SERVICES ---
  django-app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - SECRET_KEY=${SECRET_KEY}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      sh -c "python manage.py wait_for_db --timeout 60 --interval 5 &&
            python manage.py migrate &&
            python manage.py check --deploy &&
            gunicorn --bind 0.0.0.0:8000 config.wsgi:application"
    env_file: .env
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    networks:
      - backend
      - frontend
    ports:
      - "${APP_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- OBSERVABILITY ---
  prometheus-monitoring:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - backend
    command: --config.file=/etc/prometheus/prometheus.yml

  # --- NETWORK SERVICES ---  
  nginx-proxy:
    image: nginx:1.25-alpine
    ports:
      - "80:80"    # HARDCODED: Disable when using cloud load balancer
      - "443:443"  # HARDCODED: Use ACM/Let's Encrypt for production certificates
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:  
      django-app:
        condition: service_healthy

    networks:
      - frontend
      - backend

volumes:
  postgres_data:    # Persistent storage for database
  prometheus_data:  # Metrics storage (retain for 30 days)

networks:
  backend:
    driver: bridge
    internal: false  # true: Security: No direct internet access, false: Allow cross-network communication
  frontend:         # Public-facing network
    driver: bridge

# CRITICAL SECURITY REQUIREMENTS
# 1. Never commit .env file - add to .gitignore
# 2. Generate production certificates:
#    openssl dhparam -out nginx/ssl/dhparam.pem 4096
# 3. Implement firewall rules:
#    - Allow only 443 (HTTPS) and 22 (SSH)
#    - Block all other inbound ports