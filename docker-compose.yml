services:
  # Database Service
  db:
    image: postgres:16
    container_name: db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-real_estate}
      POSTGRES_USER: ${POSTGRES_USER:-appuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

  # Web Application Service
  web:
    build: .
    container_name: web
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py collectstatic --no-input &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 config.wsgi:application --env DJANGO_SETTINGS_MODULE=config.settings.production"
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db
      PYTHONUNBUFFERED: 1
    ports:
      - "${APP_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - staticfiles:/app/staticfiles
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M

  # Monitoring Service
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backend
    restart: unless-stopped
    depends_on:
      - web

  # Reverse Proxy Service (HTTPS)
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  staticfiles:
    driver: local

networks:
  backend:
    driver: bridge
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16