# File: docker-compose.yml
# Path: my-property/docker-compose.yml
# Purpose: Production-grade orchestration with zero compromise on security


# Security Defaults (Applied to all services)
x-security-defaults: &security-defaults
  stop_grace_period: 10s       # Graceful shutdown window
  restart: unless-stopped      # Automatic recovery
  read_only: true             # Immutable filesystem
  user: "nonroot"             # Non-root execution
  cap_drop: [ALL]             # Drop all capabilities
  security_opt: 
    - no-new-privileges:true  # Privilege escalation prevention



services:
  # ---- Database Layer ----
  postgres-db:
    <<: *security-defaults
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_user
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/ssl:/ssl:ro  # SSL certificates mount
    networks:
      - secure-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user) -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
    command: >-
      -c ssl=on
      -c ssl_cert_file=/ssl/server.crt
      -c ssl_key_file=/ssl/server.key
      -c ssl_ca_file=/ssl/ca.crt

  # ---- Cache Layer ----
  redis-cache:
    <<: *security-defaults
    image: redis:7-alpine
    command: redis-server --requirepass $$(cat /run/secrets/redis_password)
    secrets:
      - redis_password
    networks:
      - secure-backend
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$$(cat /run/secrets/redis_password)", "ping"]

  # ---- Application Layer ----
  django-app:
    <<: *security-defaults
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        - UID=${HOST_UID:-1001}
    env_file: .env
    depends_on:
      postgres-db:
        condition: service_healthy
      redis-cache:
        condition: service_healthy
    networks:
      - secure-backend
    healthcheck:
      test: ["CMD", "curl", "-fsk", "https://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---- Monitoring Layer ----
  prometheus:
    <<: *security-defaults
    image: prom/prometheus:v2.47.0
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - secure-backend
    command: --config.file=/etc/prometheus/prometheus.yml

  # ---- Proxy Layer ----
  nginx-proxy:
    <<: *security-defaults
    image: nginx:1.25-alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - certbot-data:/etc/letsencrypt
    depends_on:
      django-app:
        condition: service_healthy
    networks:
      - secure-frontend
      - secure-backend

volumes:
  postgres_data:
    driver_opts:
      type: none
      device: ./data/postgres # Persistent storage location
      o: bind
  prometheus_data:
  certbot-data:

secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt

networks:
  secure-backend:
    driver: bridge
    internal: true  # No direct internet access
  secure-frontend:
    driver: bridge

    